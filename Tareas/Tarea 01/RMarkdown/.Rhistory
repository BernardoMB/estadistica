inherit.aes = TRUE)
eruption
datos.lm = lm(presion ~ peso, data=datos)
datos.lm
coeffs = coefficients(datos.lm);
coeffs
coeffs.peso
coeffs$peso
coeffs[0]
coeffs[1]
as.numeric(coeffs[1])
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
ggplot()
+ geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes = TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes = TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) + geom_line() +
stat_function(fun=mean_given_x) + xlim(140,240)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) +
stat_function(fun=mean_given_x) + xlim(140,240)
p <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
fun.1 <- function(x) x^2 + x
p + stat_function(fun = fun.1) + xlim(-5,5)
fun.1 <- function(x) x^2 + x
ggplot(data = data.frame(x = 0), mapping = aes(x = x))
+ stat_function(fun = fun.1) + xlim(-5,5)
fun.1 <- function(x) x^2 + x
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) +
stat_function(fun = fun.1) + xlim(-5,5)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) +
stat_function(fun = fun.1) + xlim(-5,5)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) +
stat_function(fun = fun.1) + xlim(-500,500)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
fun.1 <- function(x) x^2 + x
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) +
stat_function(fun = fun.1) + xlim(-500,500)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) +
stat_function(fun=mean_given_x) + xlim(140,240)
mean_given_x <- function(x) intercept + x * slope
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(-5,5)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) +
stat_function(fun=mean_given_x) + xlim(140,240)+ ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(-5,5)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) +
stat_function(fun=mean_given_x) + xlim(140,240) + stat_function(fun = mean_given_x) + xlim(-5,5)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot() + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE) +
stat_function(fun=mean_given_x) + xlim(140,240)
mean_given_x <- function(x) intercept + x * slope
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(120,260)
mean_given_x <- function(x) intercept + x * slope
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
datos <- read.csv("../Data/datos_peso_y_presion.csv", header=TRUE, sep = ",", quote = "\"", dec = ".")
datos$peso <- as.numeric(as.character(datos$peso))
datos$presion <- as.numeric(as.character(datos$presion))
head(datos)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
mean_given_x <- function(x) intercept + x * slope
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(x=peso, y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
Pres.prom<-mean(datos1$Presion)
Pes.prom<-mean(datos1$Peso)
A=0
B=0
for (i in 1:26){
A=((datos1$Presion[i]-Pres.prom)*(datos1$Peso[i]-Pes.prom))+A
B=((datos1$Peso[i]-Pes.prom)^2)+B
}
B1.hat=A/B
B0.hat=Pres.prom-(Pes.prom*B1.hat)
print(paste("Beta0 es igual a",B0.hat))
print(paste("Beta1 es igual a",B1.hat))
plot(datos1)
Recta<- abline(B0.hat,B1.hat)
Pres.prom<-mean(datos1$presion)
Pes.prom<-mean(datos1$peso)
A=0
B=0
for (i in 1:26){
A=((datos1$presion[i]-Pres.prom)*(datos1$peso[i]-Pes.prom))+A
B=((datos1$peso[i]-Pes.prom)^2)+B
}
B1.hat=A/B
B0.hat=Pres.prom-(Pes.prom*B1.hat)
print(paste("Beta0 es igual a",B0.hat))
print(paste("Beta1 es igual a",B1.hat))
plot(datos1)
Recta<- abline(B0.hat,B1.hat)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
library("ggplot2")
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(peso,p resion), data=datos, stat="identity",
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(peso,presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(peso = 0), mapping = aes(x = peso)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(peso,presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(peso = 0), mapping = aes(x = peso, y = presion)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(peso,presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(peso = 0, presion = 0), mapping = aes(x = peso, y = presion)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(peso,presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(Peso = 0, Presion = 0), mapping = aes(x = Peso, y = Presion)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(peso,presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(Peso = 0, Presion = 0), mapping = aes(x = Peso, y = Presion)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(x=peso,y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(Peso = 0, Presion = 0), mapping = aes(x = Peso, y = Presion)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(x=peso,y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
ggplot(data = data.frame(Peso = 0, Presion = 0), mapping = aes(x = Peso, y = Presion)) + stat_function(fun = mean_given_x) + xlim(120,260) + geom_point(mapping=aes(x=peso,y=presion), data=datos, stat="identity",
position="identity", show.legend=NA, inherit.aes=TRUE)
slope
slope()
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
library("ggplot2")
datos <- read.csv("../Data/datos_peso_y_presion.csv", header=TRUE, sep = ",", quote = "\"", dec = ".")
datos$peso <- as.numeric(as.character(datos$peso))
datos$presion <- as.numeric(as.character(datos$presion))
head(datos)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# X bar
x.bar <- function() {
sum <- 0
for (i in 1:length(datos$peso)) {
sum = sum + datos$peso[i]
}
sum/length(datos$peso)
}
# Y bar
y.bar <- function() {
sum <- 0
for (i in 1:length(datos$presion)) {
sum = sum + datos$presion[i]
}
sum/length(datos$presion)
}
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
scatter.plot <- ggplot(data=datos, mapping=aes(x=peso, y=presion)) + geom_point()
y.bar.plot <- geom_hline(aes(yintercept=y.bar()))
x.bar.plot <- geom_vline(aes(xintercept=x.bar()))
OLS.plot <- stat_function(fun = mean_given_x)
labels <- labs(x="Peso (x)", y="Presion (y)")
scatter.plot + y.bar.plot + x.bar.plot + OLS.plot + labels
slope <- function() {
sum.of.products <- 0
sum.of.squares <- 0
for (i in 1:length(datos$peso)) {
xi <- datos$peso[i]
yi <- datos$presion[i]
sum.of.products <- sum.of.products + xi*yi
sum.of.squares <- sum.of.squares + xi*xi
}
sum.of.products/sum.of.squares
}
slope()
RTO.line <- function(x) x*slope()
RTO.plot <- stat_function(fun = RTO.line)
scatter.plot + y.bar.plot + x.bar.plot + RTO.plot + labels + xlim(0,240)
slope
slope()
intercept
slope2 <- function() {
sum.of.products <- 0
sum.of.squares <- 0
for (i in 1:length(datos$peso)) {
xi <- datos$peso[i]
yi <- datos$presion[i]
sum.of.products <- sum.of.products + xi*yi
sum.of.squares <- sum.of.squares + xi*xi
}
sum.of.products/sum.of.squares
}
slope2()
RTO.line <- function(x) x*slope2()
RTO.plot <- stat_function(fun = RTO.line)
scatter.plot + y.bar.plot + x.bar.plot + RTO.plot + labels + xlim(0,240)
B0 <- intercept
B1 <- slope
x <- 122
alpha <- 0.05
n <- length(datos$peso)
percentile <- qt(alpha/2,n-2)
SSres <- 0
for (i in 1:length(datos$peso)) {
SSres <- SSres + (datos$presion[i]-(B0+B1*datos$peso[i]))^2
}
datos$peso[1]
B1*datos$peso[1]
B1*as.numeric(datos$peso[1])
as.numeric(datos$peso[1])
as.factor(datos$peso[1])
1 + datos$peso[1]
1 + datos$peso[1]*2
B0 <- intercept
B1 <- slope
x <- 122
alpha <- 0.05
n <- length(datos$peso)
percentile <- qt(alpha/2,n-2)
SSres <- 0
for (i in 1:length(datos$peso)) {
SSres <- SSres + (datos$presion[i]-(B0+datos$peso[i]*B1))^2
}
B1
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
library("ggplot2")
datos <- read.csv("../Data/datos_peso_y_presion.csv", header=TRUE, sep = ",", quote = "\"", dec = ".")
datos$peso <- as.numeric(as.character(datos$peso))
datos$presion <- as.numeric(as.character(datos$presion))
head(datos)
# Hacer la regresion.
datos.lm = lm(presion ~ peso, data=datos)
# Extraer los coeficientes de regresion.
coeffs = coefficients(datos.lm);
intercept <- as.numeric(coeffs[1])
slope <- as.numeric(coeffs[2])
# Ecuacion de regresion lineal.
mean_given_x <- function(x) intercept + x * slope
# X bar
x.bar <- function() {
sum <- 0
for (i in 1:length(datos$peso)) {
sum = sum + datos$peso[i]
}
sum/length(datos$peso)
}
# Y bar
y.bar <- function() {
sum <- 0
for (i in 1:length(datos$presion)) {
sum = sum + datos$presion[i]
}
sum/length(datos$presion)
}
# Grafica de dispersion y recta de regresion.
# See ggplot2 documentation: http://ggplot2.tidyverse.org/index.html.
scatter.plot <- ggplot(data=datos, mapping=aes(x=peso, y=presion)) + geom_point()
y.bar.plot <- geom_hline(aes(yintercept=y.bar()))
x.bar.plot <- geom_vline(aes(xintercept=x.bar()))
OLS.plot <- stat_function(fun = mean_given_x)
labels <- labs(x="Peso (x)", y="Presion (y)")
scatter.plot + y.bar.plot + x.bar.plot + OLS.plot + labels
slope2 <- function() {
sum.of.products <- 0
sum.of.squares <- 0
for (i in 1:length(datos$peso)) {
xi <- datos$peso[i]
yi <- datos$presion[i]
sum.of.products <- sum.of.products + xi*yi
sum.of.squares <- sum.of.squares + xi*xi
}
sum.of.products/sum.of.squares
}
slope2()
RTO.line <- function(x) x*slope2()
RTO.plot <- stat_function(fun = RTO.line)
scatter.plot + y.bar.plot + x.bar.plot + RTO.plot + labels + xlim(0,240)
B0 <- intercept
B1 <- slope
x <- 122
alpha <- 0.05
n <- length(datos$peso)
percentile <- qt(alpha/2,n-2)
SSres <- 0
for (i in 1:length(datos$peso)) {
SSres <- SSres + (datos$presion[i]-(B0+datos$peso[i]*B1))^2
}
MSres <- SSres/(n-2)
Xbar <- 0
for (i in 1:length(datos$peso)) {
Xbar <- Xbar + datos$peso[i]/n
}
Sxx <- 0
for (i in 1:length(datos$peso)) {
Sxx <- Sxx + (datos$peso[i]-Xbar)^2
}
lim.inf <- B0 + B1*x + percentile*sqrt(MSres*(1+(1/n)+((x-Xbar)/(Sxx))))
lim.sup <- B0 + B1*x - percentile*sqrt(MSres*(1+(1/n)+((x-Xbar)/(Sxx))))
lim.inf
lim.sup
